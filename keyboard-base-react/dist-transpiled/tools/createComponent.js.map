{"version":3,"file":"createComponent.js","sourceRoot":"","sources":["../../src/tools/createComponent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,QAAQ,MAAM,WAAW,CAAA;AAEhC,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,MAAM,SAAS,CAAA;AAS3F,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAwB,OAAe,EAAE,EAAE;IAC7E,MAAM,WAAW,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAA;IAC7C,MAAM,cAAc,GAAG,KAAM,SAAQ,KAAK,CAAC,SAA+C;QACxF,iBAAiB;YACf,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACrC,CAAC;QAED,kBAAkB,CAAC,SAA+C;YAChE,MAAM,IAAI,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAgB,CAAA;YACtD,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;QAC1C,CAAC;QAED,MAAM;YACJ,MAAM,eAAyE,EAAzE,EAAE,QAAQ,EAAE,YAAY,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,OAA0B,EAAxB,8EAAwB,CAAA;YAE/E,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;gBAC3D,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE;oBACjE,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAA;oBACjD,IAAI,gBAAgB,CAAC,SAAS,CAAC,EAAE;wBAC9B,GAAW,CAAC,IAAI,CAAC,GAAI,MAAc,CAAC,IAAI,CAAC,CAAA;qBAC3C;iBACF;gBACD,OAAO,GAAG,CAAA;YACZ,CAAC,EAAE,EAAE,CAAC,CAAA;YAEN,MAAM,QAAQ,mCACT,WAAW,KACd,GAAG,EAAE,YAAY,EACjB,KAAK,GACN,CAAA;YAED,OAAO,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAA;QACzD,CAAC;QAED,MAAM,KAAK,WAAW;YACpB,OAAO,WAAW,CAAA;QACpB,CAAC;KACF,CAAA;IACD,OAAO,gBAAgB,CAAwB,cAAc,EAAE,WAAW,CAAC,CAAA;AAC7E,CAAC,CAAA","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { attachProps, createForwardRef, dashToPascalCase, isCoveredByReact } from './utils'\n\ninterface RegisterReactInternalProps<ElementType> extends React.HTMLAttributes<ElementType> {\n  forwardedRef?: React.Ref<ElementType>\n  href?: string\n  routerLink?: string\n  ref?: React.Ref<any>\n}\n\nexport const createReactComponent = <PropType, ElementType>(tagName: string) => {\n  const displayName = dashToPascalCase(tagName)\n  const ReactComponent = class extends React.Component<RegisterReactInternalProps<PropType>> {\n    componentDidMount() {\n      this.componentDidUpdate(this.props)\n    }\n\n    componentDidUpdate(prevProps: RegisterReactInternalProps<PropType>) {\n      const node = ReactDOM.findDOMNode(this) as HTMLElement\n      attachProps(node, this.props, prevProps)\n    }\n\n    render() {\n      const { children, forwardedRef, style, className, ref, ...cProps } = this.props\n\n      const propsToPass = Object.keys(cProps).reduce((acc, name) => {\n        if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n          const eventName = name.substring(2).toLowerCase()\n          if (isCoveredByReact(eventName)) {\n            (acc as any)[name] = (cProps as any)[name]\n          }\n        }\n        return acc\n      }, {})\n\n      const newProps: RegisterReactInternalProps<PropType> = {\n        ...propsToPass,\n        ref: forwardedRef,\n        style,\n      }\n\n      return React.createElement(tagName, newProps, children)\n    }\n\n    static get displayName() {\n      return displayName\n    }\n  }\n  return createForwardRef<PropType, ElementType>(ReactComponent, displayName)\n}\n"]}