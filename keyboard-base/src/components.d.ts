/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { KeyboardButtonProps, } from "./utils/keyboard-interfaces";
import { keyboardLanguage, KeyboardSymbol, } from "./index";
export namespace Components {
    interface RegKeyboard {
        /**
          * If true, this keyboard will listen and attempt to control any input that has the class ```global-keyboard```. If false, this keyboard will listen and attempt to control any input beneath the current parent element of this component that has the class ```local-keyboard```.
         */
        "global": boolean;
        /**
          * If set to true, and an input is put within the bounds of this keyboard, a press of a keyboard button will trigger focus on the keyboard element.
         */
        "inputWithin": boolean;
    }
    interface RegKeyboardButton {
        /**
          * The value that is added to the end of the input if the ```onPressAction``` prop is set to 'add'.
         */
        "addValue": string;
        /**
          * The name of the button. Sets custom classes on the button for custom styling. e.g - if name is 'Enter' the main element will get the class of ```keyboardButton-root-Enter``` and the native button element will get the class of ```keyboardButton-Enter```.
         */
        "buttonName": string;
        /**
          * The number of chars that are removed at the end of the input if the ```onPressAction``` prop is set to 'delete'. Can also be set to 'clear' which will delete the whole input field.
         */
        "deleteValue": number | "clear";
        /**
          * The kinds of functions that this button supports. - add: adds a character or string to the input. The string add is defined by the ```addValue``` prop. - delete: removes characters from the input string. The number of characters removed is defined by the ```deleteValue``` prop. - none: has no default add or delete actions. You will need to handle custom behavior when the ```pressed``` event fires.
         */
        "pressAction": "add" | "delete" | "none";
        /**
          * Inner Text, if you want the button to render html strings automatically.
         */
        "text"?: string;
    }
    interface RegKeyboardLayout {
        /**
          * If you'd like to modify a certain key, you can create an object that has keys you'd like to modify.
         */
        "customKeys"?: {
            [Key: string]: Omit<KeyboardButtonProps, "onPressed">;
        };
        /**
          * If you'd like to use a different language than the build-in languages.
         */
        "customLanguageTemplate"?: KeyboardSymbol;
        /**
          * The language you'd like the keyboard to use (uses built-in language files).
         */
        "language": keyboardLanguage;
        /**
          * The type of keyboard layout you'd like to render
         */
        "layout": "condensed" | "condensedNumpad" | "desktop" | "numpad";
    }
}
declare global {
    interface HTMLRegKeyboardElement extends Components.RegKeyboard, HTMLStencilElement {
    }
    var HTMLRegKeyboardElement: {
        prototype: HTMLRegKeyboardElement;
        new (): HTMLRegKeyboardElement;
    };
    interface HTMLRegKeyboardButtonElement extends Components.RegKeyboardButton, HTMLStencilElement {
    }
    var HTMLRegKeyboardButtonElement: {
        prototype: HTMLRegKeyboardButtonElement;
        new (): HTMLRegKeyboardButtonElement;
    };
    interface HTMLRegKeyboardLayoutElement extends Components.RegKeyboardLayout, HTMLStencilElement {
    }
    var HTMLRegKeyboardLayoutElement: {
        prototype: HTMLRegKeyboardLayoutElement;
        new (): HTMLRegKeyboardLayoutElement;
    };
    interface HTMLElementTagNameMap {
        "reg-keyboard": HTMLRegKeyboardElement;
        "reg-keyboard-button": HTMLRegKeyboardButtonElement;
        "reg-keyboard-layout": HTMLRegKeyboardLayoutElement;
    }
}
declare namespace LocalJSX {
    interface RegKeyboard {
        /**
          * If true, this keyboard will listen and attempt to control any input that has the class ```global-keyboard```. If false, this keyboard will listen and attempt to control any input beneath the current parent element of this component that has the class ```local-keyboard```.
         */
        "global"?: boolean;
        /**
          * If set to true, and an input is put within the bounds of this keyboard, a press of a keyboard button will trigger focus on the keyboard element.
         */
        "inputWithin"?: boolean;
        /**
          * Inputs can have a dom property ```data-layout="{something}"``` that allows them to pass the name of a layout back to the keyboard component. If the keyboard detects that the current input has a different 'data-layout' property than the previous input, it will fire this event, which provides the name of the new layout specified on the current input's ```data-layout``` dom property.
         */
        "onLayoutChange"?: (event: CustomEvent<string | null>) => void;
        /**
          * When the keyboard becomes active or inactive, this event will fire to alert whether the keyboard is currently'in use / open' (true) or not (false).
         */
        "onOpenChange"?: (event: CustomEvent<boolean>) => void;
    }
    interface RegKeyboardButton {
        /**
          * The value that is added to the end of the input if the ```onPressAction``` prop is set to 'add'.
         */
        "addValue"?: string;
        /**
          * The name of the button. Sets custom classes on the button for custom styling. e.g - if name is 'Enter' the main element will get the class of ```keyboardButton-root-Enter``` and the native button element will get the class of ```keyboardButton-Enter```.
         */
        "buttonName": string;
        /**
          * The number of chars that are removed at the end of the input if the ```onPressAction``` prop is set to 'delete'. Can also be set to 'clear' which will delete the whole input field.
         */
        "deleteValue"?: number | "clear";
        "onKeyboardButtonPress"?: (event: CustomEvent<{
            action: "add";
            value: string;
        } | {
            action: "delete";
            value: number | "clear";
        }>) => void;
        /**
          * This event will fire on keyboard-button mouse-down;
         */
        "onKeyboardButtonWillPress"?: (event: CustomEvent<void>) => void;
        /**
          * This event will fire when the button is pressed;
         */
        "onPressed"?: (event: CustomEvent<string>) => void;
        /**
          * The kinds of functions that this button supports. - add: adds a character or string to the input. The string add is defined by the ```addValue``` prop. - delete: removes characters from the input string. The number of characters removed is defined by the ```deleteValue``` prop. - none: has no default add or delete actions. You will need to handle custom behavior when the ```pressed``` event fires.
         */
        "pressAction": "add" | "delete" | "none";
        /**
          * Inner Text, if you want the button to render html strings automatically.
         */
        "text"?: string;
    }
    interface RegKeyboardLayout {
        /**
          * If you'd like to modify a certain key, you can create an object that has keys you'd like to modify.
         */
        "customKeys"?: {
            [Key: string]: Omit<KeyboardButtonProps, "onPressed">;
        };
        /**
          * If you'd like to use a different language than the build-in languages.
         */
        "customLanguageTemplate"?: KeyboardSymbol;
        /**
          * The language you'd like the keyboard to use (uses built-in language files).
         */
        "language"?: keyboardLanguage;
        /**
          * The type of keyboard layout you'd like to render
         */
        "layout"?: "condensed" | "condensedNumpad" | "desktop" | "numpad";
    }
    interface IntrinsicElements {
        "reg-keyboard": RegKeyboard;
        "reg-keyboard-button": RegKeyboardButton;
        "reg-keyboard-layout": RegKeyboardLayout;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "reg-keyboard": LocalJSX.RegKeyboard & JSXBase.HTMLAttributes<HTMLRegKeyboardElement>;
            "reg-keyboard-button": LocalJSX.RegKeyboardButton & JSXBase.HTMLAttributes<HTMLRegKeyboardButtonElement>;
            "reg-keyboard-layout": LocalJSX.RegKeyboardLayout & JSXBase.HTMLAttributes<HTMLRegKeyboardLayoutElement>;
        }
    }
}
